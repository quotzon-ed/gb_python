class Cell:
  def __init__(self, value):
    self.value = value
  def __add__(self, other):
    return f"–ü—Ä–∏ —Å–ª–æ–∂–µ–Ω–∏–∏ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫ –ø–æ–ª—É—á–∏–ª–∞—Å—å –∫–ª–µ—Ç–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ {self.value + other.value} —è—á–µ–µ–∫."
  def __sub__(self, other):
    cell_sub = self.value - other.value
    if cell_sub > 0:
      return f"–†–∞–∑–Ω–æ—Å—Ç—å –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫ –¥–∞–ª–∞ –∫–ª–µ—Ç–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ {cell_sub} —è—á–µ–µ–∫."
    elif cell_sub == 0:
      return f"–ö–ª–µ—Ç–∫–∏ —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞"
    else:
      return f"–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –¥–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
  def __mul__(self, other):
    return f"–ü—Ä–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫ –ø–æ–ª—É—á–∏–ª–∞—Å—å –∫–ª–µ—Ç–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ {self.value * other.value} —è—á–µ–µ–∫."
  def __truediv__(self, other):
    if other.value != 0 and self.value / other.value >= 1:
      return f"–ü—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫ –ø–æ–ª—É—á–∏–ª–∞—Å—å –∫–ª–µ—Ç–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ {int(self.value / other.value)} —è—á–µ–µ–∫."
    elif other.value != 0 and self.value / other.value < 1:
      return f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ –∫–ª–µ—Ç–∫–µ –º–µ–Ω—å—à–µ 1, —Ç–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞"
    else:
      return f"–î–µ–ª–∏—Ç—å –Ω–∞ 0 –Ω–µ–ª—å–∑—è!"
  def make_order(self, row):
    for r in range(row - 1):
      for c in range(self.value // row):
        print("üí•", end=" ")
      print("")
    if self.value % row != 0:
      for last in range(self.value % row):
        print("üí•", end=" ")
      print("")

cell_1 = Cell(20)
cell_2 = Cell(10)
print(f'{cell_1 + cell_2}\n{cell_1 - cell_2}\n{cell_1 * cell_2}\n{cell_1 / cell_2}')
cell_1.make_order(5)